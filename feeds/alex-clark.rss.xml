<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Alex Clark - Python Web Developer &amp; Musician</title><link>http://blog.aclark.net/</link><description></description><atom:link href="http://blog.aclark.net/feeds/alex-clark.rss.xml" rel="self"></atom:link><lastBuildDate>Sun, 31 May 2015 10:12:03 -0400</lastBuildDate><item><title>Plone Add-On Development for "Unix Hackers"</title><link>http://blog.aclark.net/2015/05/31/plone-add-on-development-for-unix-hackers/</link><description>&lt;p&gt;With Plone 5 heating up, it's time for me to go &amp;quot;all in&amp;quot; on Plone again. To that end, here's a new tutorial for &amp;quot;Unix Hackers&amp;quot;; i.e. &lt;strong&gt;command-line savvy developers who may be totally unfamiliar with Python but want to learn Plone&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This time, in the form of an embedded Gist!&lt;/p&gt;
&lt;script src="https://gist.github.com/aclark4life/ffcea3a79b6339591c24.js"&gt;&lt;/script&gt;&lt;p&gt;Check out&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Clark</dc:creator><pubDate>Sun, 31 May 2015 10:12:03 -0400</pubDate><guid>tag:blog.aclark.net,2015-05-31:2015/05/31/plone-add-on-development-for-unix-hackers/</guid><category>Plone</category><category>Python</category></item><item><title>Plock Rocks</title><link>http://blog.aclark.net/2015/04/26/plock-rocks/</link><description>&lt;img alt="Plock Meme" class="align-center" src="/images/plock-meme.png" /&gt;
&lt;p&gt;&lt;em&gt;Plock is a Plone installer for the pip-loving crowd. Plone is the ultimate open source enterprise CMS.&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="understanding-plock"&gt;
&lt;h2&gt;Understanding Plock&lt;/h2&gt;
&lt;p&gt;To understand Plock you must understand a few things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The complexity of the Plone stack &lt;a class="footnote-reference" href="#id15" id="id1"&gt;[1]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;My desire to simplify, clarify and reduce-to-bare-elements everything I touch.&lt;/li&gt;
&lt;li&gt;My willingness to mask complexity when eliminating it is not possible, despite the risk of contributing to it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pyramid author Chris McDonough &lt;a class="footnote-reference" href="#id16" id="id2"&gt;[2]&lt;/a&gt; once made a comment a long time ago to the effect: &amp;quot;Let's stop piling more crap on top of Plone&amp;quot; and that sentiment still resonates today. That's why even though I love small and useful tools like Plock, it pains me to know what Plock is doing &amp;quot;under the hood&amp;quot; &lt;a class="footnote-reference" href="#id20" id="id3"&gt;[7]&lt;/a&gt;. Nevertheless, I felt compelled to write it and make it work well because not having it is even more painful.&lt;/p&gt;
&lt;p&gt;Before I tell you what Plock is &lt;a class="footnote-reference" href="#id21" id="id4"&gt;[8]&lt;/a&gt;, let me briefly describe what Plone is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-is-plone-really"&gt;
&lt;h2&gt;What is Plone, really?&lt;/h2&gt;
&lt;p&gt;What is the complexity I mention above? Briefly, with as few loaded statements as possible:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Zope2&lt;/strong&gt; &amp;quot;application server&amp;quot;. This is something you can &lt;tt class="docutils literal"&gt;pip install&lt;/tt&gt; but the results will not be usable &lt;a class="footnote-reference" href="#id17" id="id5"&gt;[3]&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Zope2 add-ons&lt;/strong&gt; AKA &amp;quot;products&amp;quot;, most notably the Zope2 Content Management Framework (CMF). This is something you install on top of Zope2 (conceptually but not literally, &lt;tt class="docutils literal"&gt;pip install Products.CMFCore&lt;/tt&gt;) that provides typical content management features e.g. personalization, workflow, cataloging, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Zope3&lt;/strong&gt; technologies e.g. the Zope Component Architecture (ZCA). These are things that are included-or-integrated with Zope2 and Plone. &lt;a class="footnote-reference" href="#id18" id="id6"&gt;[4]&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Buildout&lt;/strong&gt; technologies e.g. setuptools, console scripts, recipes, extensions, etc. You can't easily build Plone without them, so we may as well declare them as dependencies.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Plone&lt;/strong&gt; technologies. Plone was originally known as a &amp;quot;skin for CMF&amp;quot; but has become much more than that.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Archetypes&lt;/strong&gt; Legacy content type framework.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dexterity&lt;/strong&gt; Modern content type framework based on modern Zope concepts e.g. &amp;quot;Reuse over reinvention&amp;quot;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Diazo&lt;/strong&gt; Modern theming engine based on XSLT that &amp;quot;maps Plone content to generic website themes.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In total, if you &lt;tt class="docutils literal"&gt;pip install Plone&lt;/tt&gt; over 200 Python packages are installed &lt;a class="footnote-reference" href="#id19" id="id7"&gt;[5]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-is-plock-really"&gt;
&lt;h2&gt;What is Plock, really?&lt;/h2&gt;
&lt;p&gt;OK now it's time to explain Plock. Plock is something:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;you &lt;strong&gt;install from PyPI&lt;/strong&gt; via &lt;tt class="docutils literal"&gt;pip install plock&lt;/tt&gt;. &amp;quot;Pip installs packages. Plock installs Plone.&amp;quot;&lt;/li&gt;
&lt;li&gt;you use to &lt;strong&gt;install Plone&lt;/strong&gt; without having to know about tarballs or Buildout.&lt;/li&gt;
&lt;li&gt;you use to &lt;strong&gt;install Plone add-ons&lt;/strong&gt; without having to know about Buildout.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In one sentence: Plock runs Buildout so you don't have to, at least initially.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="first-steps-with-plock"&gt;
&lt;h2&gt;First steps with Plock&lt;/h2&gt;
&lt;div class="section" id="step-1"&gt;
&lt;h3&gt;Step #1&lt;/h3&gt;
&lt;p&gt;The first step with Plock &lt;a class="footnote-reference" href="#id22" id="id8"&gt;[9]&lt;/a&gt; is that light bulb moment when you say to yourself: &amp;quot;I've heard that Plone is the ultimate open source enterprise CMS and I'd love to try it!&amp;quot; But you aren't willing to download a compressed archive and run the installer nor are you willing to &lt;tt class="docutils literal"&gt;pip install zc.buildout&lt;/tt&gt; and figure the rest out for yourself. Enter Plock.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-2"&gt;
&lt;h3&gt;Step #2&lt;/h3&gt;
&lt;p&gt;The second step with Plock is knowing that it exists you can install it with: &lt;tt class="docutils literal"&gt;pip install plock&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-3"&gt;
&lt;h3&gt;Step #3&lt;/h3&gt;
&lt;p&gt;The third step with Plock is using it to install Plone:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ plock plone
Creating virtualenv... (plone)
Installing buildout...
Downloading installer (https://launchpad.net/plone/4.3/4.3.4/+download/Plone-4.3.4-r1-UnifiedInstaller.tgz)
Unpacking installer...
Unpacking cache...
Installing eggs...
Installing cmmi &amp;amp; dist...
Configuring cache...
Running buildout...
Done, now run:
  plone/bin/plone fg
&lt;/pre&gt;
&lt;p&gt;Now Plock's work is done; visit the following URL: &lt;a class="reference external" href="http:://localhost:8080"&gt;http:://localhost:8080&lt;/a&gt; and you should see:&lt;/p&gt;
&lt;img alt="Plock Screen 1" class="align-center" src="/images/plock-screen-1.png" /&gt;
&lt;p&gt;Create a Plone site:&lt;/p&gt;
&lt;img alt="Plock Screen 2" class="align-center" src="/images/plock-screen-2.png" /&gt;
&lt;p&gt;Start using Plone:&lt;/p&gt;
&lt;img alt="Plock Screen 3" class="align-center" src="/images/plock-screen-3.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="next-steps-with-plock"&gt;
&lt;h2&gt;Next steps with Plock&lt;/h2&gt;
&lt;p&gt;Plock is more than just a way to install the latest stable version of Plone quickly and easily. It's also a way to find and install Plone add-ons quickly and easily, and a way to install almost any version of Plone including the upcoming Plone 5 release.&lt;/p&gt;
&lt;div class="section" id="installing-add-ons"&gt;
&lt;h3&gt;Installing Add-ons&lt;/h3&gt;
&lt;div class="section" id="id9"&gt;
&lt;h4&gt;Step #1&lt;/h4&gt;
&lt;p&gt;List all Plone-related packages on PyPI:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ plock -l
1) 73.unlockItems                           - A small tool for unlocking web_dav locked item in a plone portal.
2) actionbar.panel                          - Provides a (old) facebook style action panel at the bottom of your  Plone site
3) adi.init                                 - Deletes Plone's default contents
4) adi.samplecontent                        - Deletes Plone's default content and adds some sample content
5) adi.slickstyle                           - A slick style for Plone portals, easily extendable for your own styles.
6) affinitic.simplecookiecuttr              - Basic integration of jquery.cookiecuttr.js for Plone 3
7) anthill.querytool                        - GUI for AdvancedQuery with some extensions - searching the easy way for Plone
8) anthill.skinner                          - Skinning for plone made easy
9) anz.dashboard                            - Plone netvibes like dashboard implementation
10) anz.ijabbar                              - Integrate iJab(an open source XMPP web chat client recommended by xmpp.org) to your plone site.
…
1,352) zopeskel.diazotheme                      - Paster templates for Plone Diazo theme package
1,353) zopeskel.niteoweb                        - Paster templates for standard NiteoWeb Plone projects
1,354) zopyx.ecardsng                           - An ECard implementation for Plone
1,355) zopyx.existdb                            - Plone-ExistDB integration
1,356) zopyx.ipsumplone                         - Lorem ipsum text and image demo content for Plone
1,357) zopyx.multieventcalendar                 - A multi-event calendar for Plone 3.X
1,358) zopyx.plone.cassandra                    - Show all assigned local roles within a subtree for any Plone 4 site
1,359) zopyx.plone.migration                    - Export/import scripts for migration Plone 2+3 to Plone 4
1,360) zopyx.smartprintng.plone                 - Produce &amp;amp; Publisher server integration with Plone
1,361) zopyx.together                           - Plone integration with together.js
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h4&gt;Step #2&lt;/h4&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Plock currently only supports the initial creation of &lt;tt class="docutils literal"&gt;buildout.cfg&lt;/tt&gt;, so if you have already run &lt;tt class="docutils literal"&gt;plock&lt;/tt&gt; once and you want to install add-ons you'll have to use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-f&lt;/span&gt;&lt;/tt&gt; to overwrite &lt;tt class="docutils literal"&gt;buildout.cfg&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Pick a few interesting things and install them:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ plock plone -i &amp;quot;Products.PloneFormGen collective.plonetruegallery eea.facetednavigation&amp;quot;
Creating virtualenv... (plone)
Installing buildout...
Downloading installer (https://launchpad.net/plone/4.3/4.3.4/+download/Plone-4.3.4-r1-UnifiedInstaller.tgz)
Unpacking installer...
Unpacking cache...
Installing eggs...
Installing cmmi &amp;amp; dist...
Configuring cache...
Installing addons...
- https://pypi.python.org/pypi/Products.PloneFormGen
- https://pypi.python.org/pypi/collective.plonetruegallery
- https://pypi.python.org/pypi/eea.facetednavigation
Running buildout...
Done, now run:
  plone/bin/plone fg
&lt;/pre&gt;
&lt;p&gt;Now you should see your add-ons available in Plone:&lt;/p&gt;
&lt;img alt="Plock Screen 6" src="/images/plock-screen-6.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="upgrading-plone"&gt;
&lt;h3&gt;Upgrading Plone&lt;/h3&gt;
&lt;div class="section" id="id11"&gt;
&lt;h4&gt;Step #1&lt;/h4&gt;
&lt;p&gt;Realize Plock has created a &lt;tt class="docutils literal"&gt;buildout.cfg&lt;/tt&gt; file you can edit with a text editor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h4&gt;Step #2&lt;/h4&gt;
&lt;p&gt;Also realize Plock hosts &lt;a class="reference external" href="https://github.com/plock/pins"&gt;Buildout configuration files called Pins&lt;/a&gt; you can &lt;tt class="docutils literal"&gt;extend&lt;/tt&gt; from your local &lt;tt class="docutils literal"&gt;buildout.cfg&lt;/tt&gt; file &lt;a class="footnote-reference" href="#id23" id="id13"&gt;[10]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id14"&gt;
&lt;h4&gt;Step #3&lt;/h4&gt;
&lt;p&gt;Edit your &lt;tt class="docutils literal"&gt;buildout.cfg&lt;/tt&gt; file. Change the first &lt;tt class="docutils literal"&gt;extends&lt;/tt&gt; URL from:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[buildout]
extends =
    https://raw.github.com/plock/pins/master/plone-4-3
#    https://raw.github.com/plock/pins/master/dev
&lt;/pre&gt;
&lt;p&gt;To:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[buildout]
extends =
    https://raw.github.com/plock/pins/master/plone-5-0
#    https://raw.github.com/plock/pins/master/dev
&lt;/pre&gt;
&lt;p&gt;Run Buildout and start Plone:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ bin/buildout
$ bin/plone fg
&lt;/pre&gt;
&lt;p&gt;Enjoy the Plone 5 running man:&lt;/p&gt;
&lt;img alt="Plock Screen 5" class="align-center" src="/images/plock-screen-5.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;Cut and paste this into a terminal:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install plock; plock plone; plone/bin/plone fg
&lt;/pre&gt;
&lt;p&gt;Now open &lt;a class="reference external" href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt; and happy Ploning.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Plock 0.3.0 is out! Install with&lt;/em&gt; &lt;tt class="docutils literal"&gt;pip install plock&lt;/tt&gt; &lt;em&gt;and report issues here:&lt;/em&gt; &lt;a class="reference external" href="https://github.com/plock/plock/issues"&gt;https://github.com/plock/plock/issues&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="footnotes"&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;table class="docutils footnote" frame="void" id="id15" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Whether or not dealing with that complexity is &amp;quot;worth it&amp;quot; I will not address here. Suffice it to say people still use and care about Plone and with Plone 5 coming &amp;quot;real soon now&amp;quot; there is some excitement building.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id16" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;He probably made it many times, and rightfully so.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id17" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;You can create an &amp;quot;instance&amp;quot; after &lt;tt class="docutils literal"&gt;pip install zope2&lt;/tt&gt; with &lt;tt class="docutils literal"&gt;bin/mkzopeinstance&lt;/tt&gt; but &lt;tt class="docutils literal"&gt;$INSTANCE/bin/runzope&lt;/tt&gt; fails with &lt;tt class="docutils literal"&gt;ImportError: cannot import name _error_start&lt;/tt&gt; probably due to mismanaged package versions. Maybe we can fix this with version specs included in a dummy package's &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt;?&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id18" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The integration is &lt;em&gt;not&lt;/em&gt; seemless, an undisputed fact as far as I know.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id19" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id7"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;235&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id20" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[7]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Creating and executing a &lt;tt class="docutils literal"&gt;buildout.cfg&lt;/tt&gt; file for the end user. Buildout configuration files are written in INI-style text. Ideally the end user sees this file and says &amp;quot;Ah, now I understand how this works.&amp;quot;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id21" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[8]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I've also &lt;a class="reference external" href="http://blog.aclark.net/2013/07/19/introducing-plock/"&gt;covered&lt;/a&gt; &lt;a class="reference external" href="http://blog.aclark.net/2013/07/29/whats-new-as-of-plock-0-1-2/"&gt;Plock&lt;/a&gt; &lt;a class="reference external" href="http://blog.aclark.net/2013/12/29/introducing-plock-again/"&gt;before&lt;/a&gt; &lt;a class="reference external" href="http://blog.aclark.net/2014/03/20/introducing-plock-pins/"&gt;here&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id22" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id8"&gt;[9]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;As someone familiar with Python and a UNIX shell already, because that is the market I like to serve.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id23" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id13"&gt;[10]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes, there is a security and/or reliability issue with doing this; you are clearly trading security and reliability for convenience.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;br /&gt;
&lt;script data-gratipay-username="aclark4life" src="//grtp.co/v1.js"&gt;&lt;/script&gt;&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Clark</dc:creator><pubDate>Sun, 26 Apr 2015 18:10:00 -0400</pubDate><guid>tag:blog.aclark.net,2015-04-26:2015/04/26/plock-rocks/</guid><category>Plone</category><category>Python</category></item><item><title>Pillow 2015 Report</title><link>http://blog.aclark.net/2015/04/05/pillow-2015-report/</link><description>&lt;img alt="Most interesting man" src="/images/pillow-2015-report.png" /&gt;
&lt;p&gt;&lt;em&gt;Pillow is the friendly PIL fork by Alex Clark and Contributors. PIL is the Python Imaging Library by Fredrik Lundh and Contributors.&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="the-state-of-the-pillow"&gt;
&lt;h2&gt;The state of the Pillow&lt;/h2&gt;
&lt;p&gt;Pillow Fighter #2 Eric Soroos had some time constraints recently so I managed the Pillow 2.8 release. While preparing the release I also reviewed and updated the entire project, including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Issues&lt;/li&gt;
&lt;li&gt;Pull Requests&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;li&gt;Website&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;July of 2015 will mark Pillow's 5th anniversary and as of 2015, PIL is 20 years old. In early 2015, the state of the Pillow is good. Here are some statistics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Over &lt;a class="reference external" href="https://pypi.python.org/pypi/vanity"&gt;5.5 million PyPI downloads&lt;/a&gt;.&lt;ul&gt;
&lt;li&gt;About &lt;a class="reference external" href="https://pypi.python.org/pypi/Pillow/2.8.1#downloads"&gt;36 distributions&lt;/a&gt; uploaded with each release, including Windows Eggs/Exes/Wheels, OS X Wheels and source distributions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;4 core contributors AKA Pillow Fighters, including the recently added Alexander Karpinsky (AKA 'homm').&lt;/li&gt;
&lt;li&gt;Over &lt;a class="reference external" href="https://github.com/python-pillow/Pillow/graphs/contributors"&gt;130 total contributors&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;66 open issues (431 closed).&lt;/li&gt;
&lt;li&gt;12 open pull requests (672 closed).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="issues"&gt;
&lt;h2&gt;Issues&lt;/h2&gt;
&lt;p&gt;All issues were pruned, including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Applying labels and milestones&lt;/li&gt;
&lt;li&gt;Changing state when appropriate&lt;/li&gt;
&lt;li&gt;Asking for status updates&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At this time, most if not all issues have at least one label e.g. &lt;a class="reference external" href="https://github.com/python-pillow/Pillow/labels/Bug"&gt;&amp;quot;bug&amp;quot;&lt;/a&gt; and many have milestones configured e.g. &amp;quot;2.9.0&amp;quot;. The most meaningful milestones designate either &amp;quot;this release&amp;quot; or &amp;quot;next release&amp;quot; or &amp;quot;future&amp;quot;. The most meaningful labels designate &amp;quot;needs code review or tests&amp;quot; or &amp;quot;bug or enhancement&amp;quot; or &amp;quot;question&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pull-requests"&gt;
&lt;h2&gt;Pull Requests&lt;/h2&gt;
&lt;p&gt;All mergable pull requests were merged just prior to the 2.8.0 release. Of the remaining open pull requests, most &lt;a class="reference external" href="https://github.com/python-pillow/Pillow/labels/Needs%20Code%20Review"&gt;need code review&lt;/a&gt; and the rest are experimental or in progress.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="documentation"&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Pillow's documentation is now sizeable, a large part of which was forked from the PIL handbook and some of which is created automatically by Sphinx. The remainder is new and was the focus of recent updates &lt;a class="footnote-reference" href="#id4" id="id1"&gt;[1]&lt;/a&gt;, &lt;a class="footnote-reference" href="#id5" id="id2"&gt;[2]&lt;/a&gt;, &lt;a class="footnote-reference" href="#id6" id="id3"&gt;[3]&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/python-pillow/Pillow/blob/master/README.rst"&gt;https://github.com/python-pillow/Pillow/blob/master/README.rst&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/python-pillow/Pillow/blob/master/CONTRIBUTING.md"&gt;https://github.com/python-pillow/Pillow/blob/master/CONTRIBUTING.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/python-pillow/Pillow/blob/master/RELEASING.md"&gt;https://github.com/python-pillow/Pillow/blob/master/RELEASING.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pillow.readthedocs.org/installation.html"&gt;http://pillow.readthedocs.org/installation.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="website"&gt;
&lt;h2&gt;Website&lt;/h2&gt;
&lt;p&gt;Finally, the website received some much needed attention. We're currently using a theme provided by GitHub Pages, and minimal effort is invested to maintain it, but we may be &lt;a class="reference external" href="https://github.com/python-pillow/Pillow/issues/1180"&gt;interested in building a new one&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="notes"&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://github.com/python-pillow/Pillow/pull/1175"&gt;https://github.com/python-pillow/Pillow/pull/1175&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://github.com/python-pillow/Pillow/pull/1179"&gt;https://github.com/python-pillow/Pillow/pull/1179&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://github.com/python-pillow/Pillow/pull/1181"&gt;https://github.com/python-pillow/Pillow/pull/1181&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;br /&gt;
&lt;script data-gratipay-username="aclark4life" src="//grtp.co/v1.js"&gt;&lt;/script&gt;&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Clark</dc:creator><pubDate>Sun, 05 Apr 2015 18:50:50 -0400</pubDate><guid>tag:blog.aclark.net,2015-04-05:2015/04/05/pillow-2015-report/</guid><category>Plone</category><category>Python</category></item><item><title>Don't sudo pip install</title><link>http://blog.aclark.net/2015/02/28/dont-sudo-pip-install/</link><description>&lt;p&gt;How many times have you seen this?&lt;/p&gt;
&lt;img alt="Reddit thread" src="/images/dont-sudo-pip-install.png" /&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Clark</dc:creator><pubDate>Sat, 28 Feb 2015 18:09:39 -0500</pubDate><guid>tag:blog.aclark.net,2015-02-28:2015/02/28/dont-sudo-pip-install/</guid><category>Plone</category><category>Python</category></item><item><title>Please do my homework</title><link>http://blog.aclark.net/2015/02/10/please-do-my-homework/</link><description>&lt;p&gt;Reminiscent of &lt;a class="reference external" href="http://blog.aclark.net/2012/05/23/a-simple-printer-of-nested-lists/"&gt;this phenomenon&lt;/a&gt;, I'm slowly being driven insane by Redditors asking &lt;a class="reference external" href="http://www.reddit.com/r/Python"&gt;/r/Python&lt;/a&gt; to do their homework for them. E.g.&lt;/p&gt;
&lt;img alt="Question #1" src="/images/homework1.png" /&gt;
&lt;p&gt;In principle, and putting aside &lt;a class="reference external" href="http://www.reddit.com/r/learnpython"&gt;/r/learnpython&lt;/a&gt;, I have no problem with Redditors asking questions on /r/Python that are better suited to /r/learnpython. E.g.&lt;/p&gt;
&lt;img alt="Question #2" src="/images/homework2.png" /&gt;
&lt;p&gt;But there is something about the current proliferation of homework questions on /r/Python that I find offensive.&lt;/p&gt;
&lt;img alt="Question #3" src="/images/homework3.png" /&gt;
&lt;p&gt;Perhaps it is due to:&lt;/p&gt;
&lt;p&gt;1.) Less meaningful content. I read &lt;a class="reference external" href="http://www.reddit.com/r/Python"&gt;/r/Python&lt;/a&gt; for Hacker News-like stories about Python. The more poorly written homework questions, the less meaningful content.&lt;/p&gt;
&lt;img alt="Question #4" src="/images/homework4.png" /&gt;
&lt;p&gt;2.) No prior meaningful attempt to resolve the issue. E.g. &amp;quot;Ive tried looking online, but to no avail [sic].&amp;quot; What did you try? How did that attempt fail?&lt;/p&gt;
&lt;img alt="Question #5" src="/images/homework5.png" /&gt;
&lt;p&gt;So now I feel compelled to try and discourage such posts and &lt;strong&gt;encourage more meaningful posts&lt;/strong&gt;. If you learn nothing else in school, you should &lt;strong&gt;learn how to learn&lt;/strong&gt;. It's not the answer to the question that matters, it's &lt;strong&gt;how you get there&lt;/strong&gt;. No other aspect of you answering a question or completing an assignment is as important as you &lt;strong&gt;thinking for yourself about how to do it&lt;/strong&gt;. This is almost the entire point of higher education: to learn &lt;strong&gt;how to function in the real world&lt;/strong&gt;.&lt;/p&gt;
&lt;img alt="Question #6" src="/images/homework6.png" /&gt;
&lt;p&gt;In the real world, you cannot say to your friends and/or coworkers:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
My boss is such a jerk. If you could just give me a working example of how to do my job, that would be awesome! Lolz.
&lt;/pre&gt;
&lt;p&gt;So please, /r/Python, let's &lt;strong&gt;start asking more meaningful questions&lt;/strong&gt;. And if there is anything I can do to help, please let me know.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Clark</dc:creator><pubDate>Tue, 10 Feb 2015 22:19:44 -0500</pubDate><guid>tag:blog.aclark.net,2015-02-10:2015/02/10/please-do-my-homework/</guid><category>Python</category></item><item><title>New Django Website</title><link>http://blog.aclark.net/2015/01/11/new-django-website/</link><description>&lt;p&gt;&lt;em&gt;After a series of Django gigs in 2014, I had the urge to redevelop our company website in Django; I am very happy with the results. This overview is roughly in order of development from start to finish. And since I am a &amp;quot;packaging guy&amp;quot;, I will take this opportunity to comment on miscellaneous packaging issues too&lt;/em&gt;.&lt;/p&gt;
&lt;img alt="Website front page" src="/images/aclarknet-django.png" /&gt;
&lt;div class="section" id="same-theme-different-backend"&gt;
&lt;h2&gt;Same theme, different backend&lt;/h2&gt;
&lt;p&gt;The Pyramid version of aclark.net was almost two years old and needed an overhaul. Django appeared attractive because:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I know Django, but I don't know enough Django. Like with Pyramid and Plone before, I learned a lot of Django while developing this site over the last few weeks.&lt;/li&gt;
&lt;li&gt;There was no &amp;quot;content&amp;quot; with the previous (Pyramid) site. The idea of putting my &amp;quot;content&amp;quot; in Django models was appealing to me.&lt;/li&gt;
&lt;li&gt;The new &lt;a class="reference external" href="https://djangoproject.com"&gt;Django project&lt;/a&gt; website is awesome! An awesome website makes me want to build another awesome website with an awesome web framework. Awesome.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="i-hate-code-generators"&gt;
&lt;h2&gt;I hate code generators&lt;/h2&gt;
&lt;p&gt;I typically hate using code generators, full stop. But somehow Django's &lt;tt class="docutils literal"&gt;startproject&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;startapp&lt;/tt&gt; don't make me want to vomit. So I used them in an organic &lt;a class="footnote-reference" href="#id7" id="id1"&gt;[1]&lt;/a&gt; way, to make some &lt;a class="reference external" href="https://github.com/ACLARKNET/aclarknet-django/tree/master/aclarknet/aclarknet/aclarknet"&gt;obnoxiously long package names&lt;/a&gt;, and I &lt;em&gt;miraculously&lt;/em&gt; don't hate the results! This can only mean:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I am more tolerant of boilerplate code when learning a new framework, and/or:&lt;/li&gt;
&lt;li&gt;The process of creating the boilerplate code and the resulting boilerplate are so elegant/minimalistic that my insatiable desire for elegance/minimalism is at least partially satisified.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="no-postgres-no-problem"&gt;
&lt;h2&gt;No Postgres? No problem&lt;/h2&gt;
&lt;p&gt;The idea of having to develop locally with Postgresql (or some other &amp;quot;real&amp;quot; database) feels &amp;quot;heavy&amp;quot; to me. With sqlite, I don't have to worry about database setup until I'm ready to worry about database setup &lt;a class="footnote-reference" href="#id8" id="id2"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I even pushed to Heroku with the sqlite database checked in, until I was ready to deploy Postgres. And I still use sqlite locally.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bootstrap-all-the-things"&gt;
&lt;h2&gt;Bootstrap all the things&lt;/h2&gt;
&lt;p&gt;Sure Bootstrap is ubiquitious now, but it remains attractive nonetheless. One of the first tasks I performed was add &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;django-admin-bootstrapped&lt;/span&gt;&lt;/tt&gt; to my &lt;tt class="docutils literal"&gt;INSTALLED_APPS&lt;/tt&gt; &lt;a class="footnote-reference" href="#id9" id="id3"&gt;[3]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And because it's 2015, I Bower-installed Bootstrap and Fontawesome for my theme development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="make-like-a-tree-and-file"&gt;
&lt;h2&gt;Make like a tree and file&lt;/h2&gt;
&lt;p&gt;Lately I've gotten into the habit of using good-ol' Make to automate various tasks &lt;a class="footnote-reference" href="#id10" id="id4"&gt;[4]&lt;/a&gt;. This project was no exception:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
dump:
    curl -o latest.dump `heroku pgbackups:url`
push:
    git push
    git push heroku master
sync:
    heroku run python aclarknet/manage.py syncdb
publish:
    git commit -a -m &amp;quot;Update&amp;quot;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="add-ons-apps-eggs-distributions-packages-products-wheels"&gt;
&lt;h2&gt;Add-ons, Apps, Eggs, Distributions, Packages, Products, Wheels&lt;/h2&gt;
&lt;p&gt;I am &lt;em&gt;literally&lt;/em&gt; annoyed by the &lt;em&gt;figurative&lt;/em&gt; abomination that is Python packaging terminology. The proliferation of terms is understandable though because of the many layers of &lt;em&gt;technology&lt;/em&gt;, each with its own &lt;em&gt;terminology&lt;/em&gt;, that may or may not overlap:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The Python language&lt;/li&gt;
&lt;li&gt;Various packaging frameworks&lt;/li&gt;
&lt;li&gt;Software written in Python&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And all of that was just so I could tell you I pip-installed the following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Django
Pillow
django-admin-bootstrapped
django-cumulus
dj-database-url
dj-static
gunicorn
psycopg2
-e aclarknet
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="buildout-conda-easy-install-pip"&gt;
&lt;h2&gt;Buildout, Conda, easy_install, pip&lt;/h2&gt;
&lt;p&gt;On a related subject, why do I have a &lt;a class="reference external" href="https://github.com/ACLARKNET/aclarknet-django/blob/master/aclarknet/setup.py"&gt;setup.py&lt;/a&gt;? I get the feeling that Django projects in the wild sometimes have one and sometimes don't. And the Django documentation &lt;a class="reference external" href="https://docs.djangoproject.com/search/?q=setup+py&amp;amp;release=11"&gt;has only a few mentions of setup.py&lt;/a&gt;. So why do I have one?&lt;/p&gt;
&lt;p&gt;In short, because I want my code in &lt;tt class="docutils literal"&gt;sys.path&lt;/tt&gt;. I have another feeling that when Django projects/apps/etc don't have setup.py files, they are somehow manipulating sys.path manually to include themselves. There is &lt;a class="reference external" href="https://docs.djangoproject.com/search/?q=sys+path&amp;amp;release=11"&gt;slightly more mentioning of sys.path&lt;/a&gt; in Django's documentation, at least.&lt;/p&gt;
&lt;p&gt;Anyway, I use setup.py because I'm familiar with setuptools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="contact-form"&gt;
&lt;h2&gt;Contact Form&lt;/h2&gt;
&lt;p&gt;Enough packaging rants, back to the rest of the Django story.&lt;/p&gt;
&lt;p&gt;Every business website needs a contact form, right? And contact forms are tedious and boring to create, right? Yes and yes. That's why I thought using &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;django-contact-form&lt;/span&gt;&lt;/tt&gt; would be a good idea. Unfortunately I ran into an issue I couldn't easily work around, so I gave up and &lt;a class="reference external" href="https://github.com/ACLARKNET/aclarknet-django/blob/master/aclarknet/aclarknet/aclarknet/views.py#L32"&gt;made my own&lt;/a&gt; &lt;a class="footnote-reference" href="#id11" id="id5"&gt;[5]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="orm-i-really-on-my-own"&gt;
&lt;h2&gt;ORM I really on my own?&lt;/h2&gt;
&lt;a class="reference external image-reference" href="https://twitter.com/aclark4life/status/552626214008274944"&gt;&lt;img alt="Tweet" src="/images/aclark-tweet.png" /&gt;&lt;/a&gt;
&lt;p&gt;That's right. After adding an &lt;tt class="docutils literal"&gt;ImageField&lt;/tt&gt; I expected the image to be stored in the database and not the file system, and I'm not ashamed. Since that was not the case, I ended up using &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;django-cumulus&lt;/span&gt;&lt;/tt&gt; &lt;a class="footnote-reference" href="#id12" id="id6"&gt;[6]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="overall"&gt;
&lt;h2&gt;Overall&lt;/h2&gt;
&lt;p&gt;Overall, this was a great experience. As such, I'm now considering another &lt;a class="reference external" href="http://pythonpackages.com"&gt;pythonpackages.com&lt;/a&gt; reboot with Django; to further exercise my Django chops and fullfill the packaging-automation-vision I've had since late 2011.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Please let me know your reaction to my experiences in the comments.&lt;/em&gt;&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;django-admin&lt;/span&gt; startproject aclarknet; cd aclarknet/aclarknet; &lt;span class="pre"&gt;django-admin&lt;/span&gt; startapp aclarknet&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Granted, the perceived heaviness is much worse than the &lt;em&gt;actual&lt;/em&gt; burden of &amp;quot;real&amp;quot; database setup which is admittedly fairly trivial: &lt;tt class="docutils literal"&gt;brew install postgres&lt;/tt&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The Django admin without Bootstrap reminds me of the ZMI without Bootstrap, which &lt;a class="reference external" href="https://pypi.python.org/pypi/zope2_bootstrap"&gt;I also don't like&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Embarrassingly, I create the tabs with &lt;tt class="docutils literal"&gt;s/&amp;nbsp;&amp;nbsp;&amp;nbsp; /\t/&lt;/tt&gt; because my tabstop is set to 4 spaces. Maybe I should be change my tabstop setting each time?&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Something to do with Sendgrid integration, certainly not django-contact-form's fault!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Which is another story. First I tried &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;django-storages&lt;/span&gt;&lt;/tt&gt; only to discover Rackspace Cloud Files support moved to cumulus (or started in cumulus and moved back?) Then &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;django-cumulus&lt;/span&gt;&lt;/tt&gt; &lt;em&gt;almost&lt;/em&gt; worked but not quite. Rackspace Cloud Files returned a URL but upload failed. So I manually uploaded all the files to Rackspace Cloud Files as a workaround.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Clark</dc:creator><pubDate>Sun, 11 Jan 2015 18:44:48 -0500</pubDate><guid>tag:blog.aclark.net,2015-01-11:2015/01/11/new-django-website/</guid><category>Plone</category><category>Python</category></item><item><title>Packt is having a sale</title><link>http://blog.aclark.net/2015/01/05/packt-is-having-a-sale/</link><description>&lt;img alt="Packt is having a sale!" src="/images/packt-5.png" /&gt;
&lt;p&gt;Happy new year!&lt;/p&gt;
&lt;p&gt;For those who haven't heard, PACKT is having a $5 &amp;quot;bonanza&amp;quot;. &lt;a class="reference external" href="https://www.packtpub.com/packt5dollar/?utm_source=rochelld&amp;amp;utm_medium=referral&amp;amp;utm_campaign=5D2014"&gt;Pick up some $5 Python books&lt;/a&gt; while you can! E.g.:&lt;/p&gt;
&lt;img alt="Popular Python titles" src="/images/packt-pop.png" /&gt;
&lt;p&gt;Sale ends tomorrow, &lt;a class="reference external" href="https://www.packtpub.com/packt5dollar/?utm_source=rochelld&amp;amp;utm_medium=referral&amp;amp;utm_campaign=5D2014"&gt;check it out&lt;/a&gt;!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Clark</dc:creator><pubDate>Mon, 05 Jan 2015 14:56:26 -0500</pubDate><guid>tag:blog.aclark.net,2015-01-05:2015/01/05/packt-is-having-a-sale/</guid><category>Plone</category><category>Python</category></item><item><title>Pillow Runs Itself!</title><link>http://blog.aclark.net/2014/10/02/pillow-runs-itself/</link><description>&lt;p&gt;&lt;strong&gt;As of Pillow 2.6.0, the Pillow project almost completely runs itself!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Of course when I say &amp;quot;runs itself&amp;quot; I mean &amp;quot;runs without me&amp;quot;, which is what &lt;strong&gt;every open source project lead hopes for&lt;/strong&gt;. For the first time ever, I was able to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Turn off GitHub Watching until two weeks before the release.&lt;/li&gt;
&lt;li&gt;Not run &lt;cite&gt;setup.py upload&lt;/cite&gt; or &lt;cite&gt;twine upload&lt;/cite&gt; myself.&lt;/li&gt;
&lt;li&gt;Watch in awe as Pillow Men #s 2 &amp;amp; 3 did all the work. [1]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kudos to these gentlemen for making my life easier and for continuing to provide the Python community with a featureful, modern &amp;amp; secure Python Imaging Library. Additionally &lt;strong&gt;thanks to all the contributors from all over the world&lt;/strong&gt; who continue to develop and improve Pillow. I used to keep a list, but now there are &lt;a class="reference external" href="https://github.com/python-pillow/Pillow/graphs/contributors"&gt;too many to keep track of&lt;/a&gt;. Oh and lastly, &lt;a class="reference external" href="https://twitter.com/wiredfool/status/517382632267841536"&gt;2.6.0 is out&lt;/a&gt;! Enjoy the release &amp;amp; please &lt;a class="reference external" href="https://github.com/python-pillow/Pillow/issues"&gt;report issues here&lt;/a&gt;.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[1]&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://twitter.com/wiredfool"&gt;Eric Soroos&lt;/a&gt; &amp;amp; &lt;a class="reference external" href="https://twitter.com/hugovk"&gt;Hugo&lt;/a&gt; respectively. Additional thanks to Christoph Gohlke for &lt;a class="reference external" href="https://pypi.python.org/pypi/Pillow/2.6.0#downloads"&gt;Windows Eggs, Exes, Wheels&lt;/a&gt;, Matthew Brett for &lt;a class="reference external" href="https://github.com/python-pillow/Pillow/issues/766"&gt;OS X Wheels&lt;/a&gt;, and Steve Johnson for &lt;a class="reference external" href="https://github.com/python-pillow/Pillow/issues/769"&gt;Sphinx Documentation&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;P.S. New theme! Thanks &lt;a class="reference external" href="http://purepelican.com/"&gt;Pure Pelican Theme&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Clark</dc:creator><pubDate>Thu, 02 Oct 2014 14:30:00 -0400</pubDate><guid>tag:blog.aclark.net,2014-10-02:2014/10/02/pillow-runs-itself/</guid><category>Mozilla</category><category>Plone</category><category>Python</category></item><item><title>Pillow 2-5-0 is out!</title><link>http://blog.aclark.net/2014/07/05/pillow-2-5-0-is-out/</link><description>&lt;p&gt;&lt;strong&gt;Pillow is the &amp;quot;friendly&amp;quot; PIL fork by Alex Clark and Contributors. PIL is the Python Imaging Library by Fredrik Lundh and Contributors&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since Pillow 2.0 the Pillow Team has adopted a quarterly release cycle; as such, Pillow 2.5.0 is out! Here's what's new in this release:&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;2.5.0 (2014-07-01)&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Imagedraw rewrite
[terseus, wiredfool]&lt;/li&gt;
&lt;li&gt;Add support for multithreaded test execution
[wiredfool]&lt;/li&gt;
&lt;li&gt;Prevent shell injection #748
[mbrown1413, wiredfool]&lt;/li&gt;
&lt;li&gt;Support for Resolution in BMP files #734
[gcq]&lt;/li&gt;
&lt;li&gt;Fix error in setup.py for Python 3
[matthew-brett]&lt;/li&gt;
&lt;li&gt;Pyroma fix and add Python 3.4 to setup metadata #742
[wirefool]&lt;/li&gt;
&lt;li&gt;Top level flake8 fixes #741
[aclark]&lt;/li&gt;
&lt;li&gt;Remove obsolete Animated Raster Graphics (ARG) support
[hugovk]&lt;/li&gt;
&lt;li&gt;Fix test_imagedraw failures #727
[cgohlke]&lt;/li&gt;
&lt;li&gt;Fix AttributeError: class Image has no attribute 'DEBUG' #726
[cgohlke]&lt;/li&gt;
&lt;li&gt;Fix msvc warning: 'inline' : macro redefinition #725
[cgohlke]&lt;/li&gt;
&lt;li&gt;Cleanup #654
[dvska, hugovk, wiredfool]&lt;/li&gt;
&lt;li&gt;16-bit monochrome support for JPEG2000
[videan42]&lt;/li&gt;
&lt;li&gt;Fixed ImagePalette.save
[brightpisces]&lt;/li&gt;
&lt;li&gt;Support JPEG qtables
[csinchok]&lt;/li&gt;
&lt;li&gt;Add binary morphology addon
[dov, wiredfool]&lt;/li&gt;
&lt;li&gt;Decompression bomb protection
[hugovk]&lt;/li&gt;
&lt;li&gt;Put images in a single directory
[hugovk]&lt;/li&gt;
&lt;li&gt;Support OpenJpeg 2.1
[al45tair]&lt;/li&gt;
&lt;li&gt;Remove unistd.h #include for all platforms
[wiredfool]&lt;/li&gt;
&lt;li&gt;Use unittest for tests
[hugovk]&lt;/li&gt;
&lt;li&gt;ImageCms fixes
[hugovk]&lt;/li&gt;
&lt;li&gt;Added more ImageDraw tests
[hugovk]&lt;/li&gt;
&lt;li&gt;Added tests for Spider files
[hugovk]&lt;/li&gt;
&lt;li&gt;Use libtiff to write any compressed tiff files
[wiredfool]&lt;/li&gt;
&lt;li&gt;Support for pickling Image objects
[hugovk]&lt;/li&gt;
&lt;li&gt;Fixed resolution handling for EPS thumbnails
[eliempje]&lt;/li&gt;
&lt;li&gt;Fixed rendering of some binary EPS files (Issue #302)
[eliempje]&lt;/li&gt;
&lt;li&gt;Rename variables not to use built-in function names
[hugovk]&lt;/li&gt;
&lt;li&gt;Ignore junk JPEG markers
[hugovk]&lt;/li&gt;
&lt;li&gt;Change default interpolation for Image.thumbnail to Image.ANTIALIAS
[hugovk]&lt;/li&gt;
&lt;li&gt;Add tests and fixes for saving PDFs
[hugovk]&lt;/li&gt;
&lt;li&gt;Remove transparency resource after P-&amp;gt;RGBA conversion
[hugovk]&lt;/li&gt;
&lt;li&gt;Clean up preprocessor cruft for Windows
[CounterPillow]&lt;/li&gt;
&lt;li&gt;Adjust Homebrew freetype detection logic
[jacknagel]&lt;/li&gt;
&lt;li&gt;Added Image.close, context manager support.
[wiredfool]&lt;/li&gt;
&lt;li&gt;Added support for 16 bit PGM files.
[wiredfool]&lt;/li&gt;
&lt;li&gt;Updated OleFileIO to version 0.30 from upstream
[hugovk]&lt;/li&gt;
&lt;li&gt;Added support for additional TIFF floating point format
[Hijackal]&lt;/li&gt;
&lt;li&gt;Have the tempfile use a suffix with a dot
[wiredfool]&lt;/li&gt;
&lt;li&gt;Fix variable name used for transparency manipulations
[nijel]&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="acknowledgements"&gt;
&lt;h2&gt;Acknowledgements&lt;/h2&gt;
&lt;p&gt;With every release, there are notable contributions I must acknowledge:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Thanks to Stephen Johnson for contributing &lt;a class="reference external" href="http://pillow.readthedocs.org"&gt;http://pillow.readthedocs.org&lt;/a&gt;, we continue to rely on &amp;amp; extend this resource.&lt;/li&gt;
&lt;li&gt;Thanks to Christopher Gohlke for producing Windows Egg, Exe, and Wheel distributions.&lt;/li&gt;
&lt;li&gt;Thanks to Matthew Brett for producing OS X Wheels (for the first time ever!)&lt;/li&gt;
&lt;li&gt;Thanks to Eric Soroos for his contributions and serving as &amp;quot;Pillow Man #2&amp;quot; (2nd in command).&lt;/li&gt;
&lt;li&gt;Welcome to Hugo VK who has joined the Pillow Team &amp;amp; contributed significantly to this release.&lt;/li&gt;
&lt;li&gt;Thanks to all the remaining unnamed contributors! We appreciate every commit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy Pillow 2.5.0 &amp;amp; please report issues here: &lt;a class="reference external" href="https://github.com/python-imaging/Pillow/issues"&gt;https://github.com/python-imaging/Pillow/issues&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Clark</dc:creator><pubDate>Sat, 05 Jul 2014 11:15:00 -0400</pubDate><guid>tag:blog.aclark.net,2014-07-05:2014/07/05/pillow-2-5-0-is-out/</guid><category>Django</category><category>Mozilla</category><category>Plone</category><category>Python</category></item><item><title>Plone 5 Alpha 2 is here!</title><link>http://blog.aclark.net/2014/06/18/plone-5-alpha-2-is-here/</link><description>&lt;p&gt;&lt;em&gt;This post is long overdue since Plone 5 alpha 2 was released on 2014-04-20! It is also too short. I may do a followup blog entry to review more features, depending on how well this one is received. I also want to talk more about Plock.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When Plone 4 alpha 1 was released, I was so excited I immediately &lt;a class="reference external" href="http://blog.aclark.net/2012/10/03/plone-4-3-alpha-1-in-production/"&gt;ran it in production&lt;/a&gt;. Now-a-days I use &lt;a class="reference external" href="http://blog.aclark.net/2013/04/22/new-pyramid-site/"&gt;Pyramid for aclark.net&lt;/a&gt; but I still get excited about new Plone releases.&lt;/p&gt;
&lt;p&gt;As such, I finally got around to testing the latest Plone 5 alpha with &lt;a class="reference external" href="http://blog.aclark.net/2014/03/20/introducing-plock-pins/"&gt;my deployment stack&lt;/a&gt; and the results were very impressive, so I thought I'd share.&lt;/p&gt;
&lt;div class="section" id="hosted-configuration"&gt;
&lt;h2&gt;Hosted configuration&lt;/h2&gt;
&lt;p&gt;Because of the &amp;quot;muscle memory&amp;quot; I've built up over the years doing this, I always install Plone in development and production via my &lt;a class="reference external" href="https://github.com/plock/pins"&gt;hosted configuration files&lt;/a&gt;. If you are not a developer you may instead prefer the &lt;a class="reference external" href="http://plone.org/products/plone/releases/5.0"&gt;Unified Installer, VirtualBox/Vagrant installer or OS X Lion/Mountain Lion/Mavericks Binary Installer&lt;/a&gt; otherwise follow along &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pip install tmp virtualenv
$ cd `tmp`
$ virtualenv .
$ bin/pip install zc.buildout
$ bin/buildout init
&lt;/pre&gt;
&lt;p&gt;Edit &lt;tt class="docutils literal"&gt;buildout.cfg&lt;/tt&gt; to contain:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[buildout]
extends = https://raw.github.com/plock/pins/master/plone-5-0
&lt;/pre&gt;
&lt;p&gt;Run Buildout and start Plone:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ bin/buildout
$ bin/plone fg
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="create-plone-site"&gt;
&lt;h2&gt;Create Plone Site&lt;/h2&gt;
&lt;p&gt;The first thing you will notice is the improved &amp;quot;Create a Plone Site&amp;quot; page which now includes a timezone configuration option:&lt;/p&gt;
&lt;img alt="Plone 5" src="/images/plone-5-screen-0.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="barceloneta-theme"&gt;
&lt;h2&gt;Barceloneta Theme&lt;/h2&gt;
&lt;p&gt;I selected the &lt;tt class="docutils literal"&gt;US/Eastern&lt;/tt&gt; timezone and clicked &lt;tt class="docutils literal"&gt;Create Plone Site&lt;/tt&gt;, shortly after which I was greeted with a beautiful new Plone 5 site in all its open source glory. Immediately you will notice a new theme and toolbar:&lt;/p&gt;
&lt;img alt="Plone 5" src="/images/plone-5-screen-1.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="plone-toolbar"&gt;
&lt;h2&gt;Plone Toolbar&lt;/h2&gt;
&lt;p&gt;Here is a quick tour of the new toolbar.&lt;/p&gt;
&lt;img alt="Plone 5" src="/images/plone-5-screen-1.png" /&gt;
&lt;div class="section" id="folder-contents"&gt;
&lt;h3&gt;Folder contents&lt;/h3&gt;
&lt;img alt="Plone 5" src="/images/plone-5-screen-2.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="edit-button"&gt;
&lt;h3&gt;Edit button&lt;/h3&gt;
&lt;img alt="Plone 5" src="/images/plone-5-screen-3.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="sharing-settings"&gt;
&lt;h3&gt;Sharing settings&lt;/h3&gt;
&lt;img alt="Plone 5" src="/images/plone-5-screen-4.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="workflow-settings"&gt;
&lt;h3&gt;Workflow settings&lt;/h3&gt;
&lt;img alt="Plone 5" src="/images/plone-5-screen-5.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="add-content"&gt;
&lt;h3&gt;Add content&lt;/h3&gt;
&lt;img alt="Plone 5" src="/images/plone-5-screen-6.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="layout-settings"&gt;
&lt;h3&gt;Layout settings&lt;/h3&gt;
&lt;img alt="Plone 5" src="/images/plone-5-screen-7.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="user-menu"&gt;
&lt;h3&gt;User menu&lt;/h3&gt;
&lt;img alt="Plone 5" src="/images/plone-5-screen-8.png" /&gt;
&lt;p&gt;Love it! Of all these, only the eye icon didn't function as expected. Not sure what it's supposed to do but I assume it's not done yet. Additionally, I wish the small Plone logo in the toolbar navigated &amp;quot;home&amp;quot; like the portal logo. Or maybe it will close the toolbar? Oh, the possibilities!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="thanks"&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;Many thanks to everyone who has worked hard to make Plone 5 a reality.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;You should probably&lt;/em&gt; &lt;a class="reference external" href="http://aclark.net"&gt;hire me&lt;/a&gt; &lt;em&gt;or&lt;/em&gt; &lt;a class="reference external" href="http://twitter.com/aclark4life"&gt;follow me on Twitter&lt;/a&gt; &lt;em&gt;or both&lt;/em&gt;.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;And please try &lt;a class="reference external" href="http://plock.github.io"&gt;Plock&lt;/a&gt; which automates all of these steps e.g. &lt;tt class="docutils literal"&gt;pip install plock; plock .;bin/plone fg&lt;/tt&gt; Once Plone (4) is installed, update the extends parameter in &lt;tt class="docutils literal"&gt;buildout.cfg&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;https://raw.github.com/plock/pins/master/plone-5-0&lt;/span&gt;&lt;/tt&gt; and rerun Buildout.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Clark</dc:creator><pubDate>Wed, 18 Jun 2014 08:00:00 -0400</pubDate><guid>tag:blog.aclark.net,2014-06-18:2014/06/18/plone-5-alpha-2-is-here/</guid><category>Plone</category><category>Python</category></item></channel></rss>